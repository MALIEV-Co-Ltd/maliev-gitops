name: GitOps Validation

on:
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint and Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint YAML files
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .
          config_file: .yamllint.yml


      



      
      - name: Download KubeLinter
        run: |
          LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/stackrox/kube-linter/releases/latest | grep "browser_download_url.*kube-linter-linux-amd64" | cut -d : -f 2,3 | tr -d \" | wget -qi -)
          wget -O kube-linter "$LATEST_RELEASE_URL"
          chmod +x kube-linter
          sudo mv kube-linter /usr/local/bin/kube-linter

      - name: Run KubeLinter on cluster-infra
        run: kube-linter lint 1-cluster-infra --config .kube-linter.yml --format sarif --output-file kube-linter-cluster-infra.sarif || true

      - name: Run KubeLinter on environments
        run: kube-linter lint 2-environments --config .kube-linter.yml --format sarif --output-file kube-linter-environments.sarif || true

      - name: Run KubeLinter on apps
        run: kube-linter lint 3-apps --config .kube-linter.yml --format sarif --output-file kube-linter-apps.sarif || true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: kube-linter-*.sarif

  validate:
    name: Kustomize and Structure Validation
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install kustomize
        run: |-
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          sudo mv kustomize /usr/local/bin/

      - name: Validate Kustomize overlays
        run: |
          find 3-apps -name kustomization.yaml -print0 | while IFS= read -r -d $'\0' file; do
            dir=$(dirname "$file")
            echo "Validating kustomization in $dir"
            kustomize build "$dir" || exit 1
          done

      - name: Check for native Secrets
        run: |
          if grep -r "kind: Secret" .; then
            echo "Error: Native Kubernetes Secrets are not allowed. Please use ExternalSecrets."
            exit 1
          fi

      - name: Validate repository structure
        run: |
          for app in 3-apps/*; do
            if [ -d "$app" ]; then
              if [ ! -d "$app/base" ] || [ ! -d "$app/overlays" ]; then
                echo "Error: $app must have a 'base' and 'overlays' directory."
                exit 1
              fi
              if [ ! -d "$app/overlays/development" ] || [ ! -d "$app/overlays/staging" ] || [ ! -d "$app/overlays/production" ]; then
                echo "Error: $app must have 'development', 'staging', and 'production' overlays."
                exit 1
              fi
            fi
          done

      - name: Validate ArgoCD Application paths
        run: |
          # This is a more complex script, for now we will just have a placeholder
          echo "Validation of ArgoCD Application paths would be implemented here."